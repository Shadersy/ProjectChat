package chat.network;

import java.io.*;
import java.net.Socket;
import java.nio.charset.Charset;



//класс соединения
public class TCPConnection {


    private final Socket socket;
    private final Thread rxThread; // 1 поток на каждом клиенте, слушающий входящее сообщение, если прилетает сообщение то
    //генерирует событие;
    private final BufferedReader in;
    private final TCPConnectionListener eventListener;
    private final BufferedWriter out;



    //этот констркутор рассчитан на то, что сокет создаетс внутри
    public TCPConnection(TCPConnectionListener eventListener, String ipAddr, int port) throws IOException{
        this(eventListener, new Socket(ipAddr, port)); //создание нового сокета на основании порта и айпи
    }


    //этот конструктор рассчитан на то, что кто-то снаружи сделает соединение создав сокет
    public TCPConnection(TCPConnectionListener eventListener, Socket socket) throws IOException{
        this.eventListener = eventListener; //записываем статус соединения
        this.socket = socket;
        in = new BufferedReader(new InputStreamReader(socket.getInputStream(), Charset.forName("UTF-8")));
        out = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream(), Charset.forName("UTF-8")));
        rxThread = new Thread(new Runnable(){
            public void run(){
               try {
                   eventListener.onConnectionReady(TCPConnection.this);
                   while(!rxThread.isInterrupted()){ //пока поток не прерван
                        //получаем строчкуу и отдаем её Eventlistener
                       eventListener.onReceiveString(TCPConnection.this, in.readLine()); //передаем объект соединения и саму строчку
                   }
                   String msg = in.readLine(); //читаем строку
               } catch(IOException e){
                   eventListener.onException(TCPConnection.this, e);
               }
               finally{
                   eventListener.onDisconnect(TCPConnection.this);
               }
            }
        }); // поток. слушает входящее соединение
        rxThread.start();
    }

    //благодаря synchronized можем обращаться к методам из разных потоков
    public synchronized void sendString(String value){
        try{
            out.write(value + "\r\n");
            out.flush();//сброс буфера
        }
        catch(IOException e){
            eventListener.onException(TCPConnection.this, e);
            disconnect();
        }
    }

    public synchronized void disconnect(){
        //когда нам понадобится оборвать соединение
        rxThread.interrupt();
        try{
            socket.close();
        }

        catch(IOException e){
            eventListener.onException(TCPConnection.this, e);
        }

    }

    public String toString(){
        return "TCPConnection: " + socket.getInetAddress() + ": " + socket.getPort(); //адрес соединения
    }


}
